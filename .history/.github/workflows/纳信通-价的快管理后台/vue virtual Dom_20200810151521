# 揭秘Vue中的Virtual Dom

---------------------------------------------------------------------------------------------------------------------------------------------

## 模板转换成视图的过程

>>>https://www.jianshu.com/p/f17d3f469d73

Vue.js通过编译将template 模板转换成渲染函数(render),执行渲染函数就可以得到一个虚拟节点树
在对 Model 进行操作的时候，会触发对应 **Dep** 中的 **Watcher** 对象。Watcher 对象会调用对应的 update 来修改视图。这个过程主要是将新旧虚拟节点进行差异对比，然后根据对比结果进行DOM操作来更新视图。
简单点讲，在Vue的底层实现上，Vue将模板编译成虚拟DOM渲染函数。结合Vue自带的响应系统，在状态改变时，Vue能够智能地计算出重新渲染组件的最小代价并应到DOM操作上。

                                         |------------------------------------虚拟DOM----------------------------------|
                                         |                                                                             |
                                         |                   |-----------------patch-----------------|                 |
|--------|  编译   |----------|  执行    | |---------|       |  |-------|  *diff算法*   |----------| |     |-------|   |        
|  模板  |========>| 渲染函数 |========> | |  vnode  |=====> |  | vnode |==============>| oldVnode | |====>|  视图 |   |          
|--------|         |----------|          | |---------|       |  |-------|               |----------| |     |-------|   |
                                         |                   |---------------------------------------|                 |
                                         |                                                                             |
                                         |-----------------------------------------------------------------------------|

我们先对上图几个概念加以解释:
* 渲染函数：渲染函数是用来生成Virtual DOM的。Vue推荐使用模板来构建我们的应用界面，在底层实现中Vue会将模板编译成渲染函数，当然我们也可以不写模板，直接写渲染函数，以获得更好的控制。
* VNode 虚拟节点：它可以代表一个真实的 dom 节点。通过 createElement 方法能将 VNode 渲染成 dom 节点。简单地说，vnode可以理解成节点描述对象，它描述了应该怎样去创建真实的DOM节点。
* patch(也叫做patching算法)：虚拟DOM最核心的部分，它可以将vnode渲染成真实的DOM，这个过程是对比新旧虚拟节点之间有哪些不同，然后根据对比结果找出需要更新的的节点进行更新。这点我们从单词含义就可以看出， patch本身就有补丁、修补的意思，其实际作用是在现有DOM上进行修改来实现更新视图的目的。Vue的Virtual DOM Patching算法是基于**Snabbdom**的实现，并在些基础上作了很多的调整和改进。

## Virtual DOM 是什么？

Virtual DOM其实就是一颗以javaScript对象(VNode对象)作为基础的树,用对象属性来描述节点,实际上它只是一层对真实DOM的抽象,最终通过一系列的操作使这颗树映射到真实环境上。
简单来说，可以把Virtual DOM 理解为一个简单的JS对象，并且最少包含标签名( tag)、属性(attrs)和子元素对象( children)三个属性。不同的框架对这三个属性的命名会有点差别

简单实例

1. 模板
<ul id="my-id">
    <li v-for="item in list">{{item}}</li> 
</ul>
      
    compile

2. 渲染函数
createElement(
    "ul",    //节点签名
    //标签上的属性,用对象存储键值对
    {
        attr:{
            id:"my-id"
        }
    },
    //该节点的子节点
    [
        createElement("li",1),
        createElement("li",2),
        createElement("li",3),
    ]
)

    render

3. 虚拟DOM树
//模拟浏览器的console
^VNode
    child:undefined,
    children:Array[3]
    ^0:VNode
    ^1:VNode
    ^2:Vnode
    length:3
    ^_proto_:Array[0]
    componentOptions:undefined
^context:Vue$3
^data:Object
^elm:ul

    create

4.真实的DOM
//模拟浏览器的console
^<ul>
    <li>1</li>
    <li>2</li>
    <li>3</li>
</ul>

## Virtual DOM 作用是什么？

虚拟DOM的最终目标是将虚拟节点渲染到视图上。但是如果直接使用虚拟节点覆盖旧节点的话，会有很多不必要的DOM操作。例如，一个ul标签下很多个li标签，其中只有一个li有变化，这种情况下如果使用新的ul去替代旧的ul,因为这些不必要的DOM操作而造成了性能上的浪费。

为了避免不必要的DOM操作，虚拟DOM在虚拟节点映射到视图的过程中，将虚拟节点与上一次渲染视图所使用的旧虚拟节点（oldVnode）做对比，找出真正需要更新的节点来进行DOM操作，从而避免操作其他无需改动的DOM。

其实虚拟DOM在Vue.js主要做了两件事：

* 提供与真实DOM节点所对应的虚拟节点vnode
* 将虚拟节点vnode和旧虚拟节点oldVnode进行对比，然后更新视图

## 为何需要Virtual DOM？

* 具备跨平台的优势
由于 Virtual DOM 是以 JavaScript 对象为基础而不依赖真实平台环境，所以使它具有了跨平台的能力，比如说浏览器平台、Weex、Node 等。

* 操作DOM慢，js运行效率高。我们可以将DOM对比操作放在JS层，提高效率。
因为DOM操作的执行速度远不如Javascript的运算速度快，因此，把大量的DOM操作搬运到Javascript中，运用patching算法来计算出真正需要更新的节点，最大限度地减少DOM操作，从而显著提高性能。

* 提升渲染性能
Virtual DOM的优势不在于单次的操作，而是在大量、频繁的数据更新下，能够对视图进行合理、高效的更新。
为了实现高效的DOM操作，一套高效的虚拟DOM diff算法显得很有必要。我们通过patch 的核心----diff 算法，找出本次DOM需要更新的节点来更新，其他的不更新。那diff 算法的实现过程是怎样的？

## diff算法
Vue的diff算法是基于snabbdom改造过来的，**仅在同级的vnode间做diff，递归地进行同级vnode的diff，最终实现整个DOM树的更新。因为跨层级的操作是非常少的，忽略不计，这样时间复杂度就从O(n3)变成O(n)**.

//个人理解就是新旧DOM树对比 只更新变化的VNode节点 而不更新未变化的VNode节点

diff 算法包括几个步骤:
* 用JavaScript对象结构表示DOM树的结构;然后用这个树构建一个真正的DOM树,插到文档当中;
* 当状态变更的时候,重新构造一棵新的对象树.然后用新的树和旧的树进行比较,记录两棵树差异;
* 把所记录的差异应用到所构建的真正的DOM树上,视图就更新了



